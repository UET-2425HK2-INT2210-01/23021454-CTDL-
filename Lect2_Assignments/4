#include <iostream>
using namespace std;

struct QueueNode {
    int value;
    QueueNode* next;
    QueueNode(int val) : value(val), next(nullptr) {}
};

class Queue {
private:
    QueueNode* head;
    QueueNode* tail;
public:
    Queue() : head(nullptr), tail(nullptr) {}
    
    void enqueue(int element) {
        QueueNode* newNode = new QueueNode(element);
        if (!tail) {
            head = tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }
    
    void dequeue() {
        if (!head) return;
        QueueNode* tempNode = head;
        head = head->next;
        if (!head) tail = nullptr;
        delete tempNode;
    }
    
    void printQueue() {
        QueueNode* currentNode = head;
        while (currentNode) {
            cout << currentNode->value << " ";
            currentNode = currentNode->next;
        }
    }
};

int main() {
    int numOperations;
    cin >> numOperations;
    Queue queue;
    
    for (int i = 0; i < numOperations; i++) {
        string operation;
        cin >> operation;
        if (operation == "enqueue") {
            int element;
            cin >> element;
            queue.enqueue(element);
        } else if (operation == "dequeue") {
            queue.dequeue();
        }
    }
    
    queue.printQueue();
    return 0;
}
